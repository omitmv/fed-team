import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { API_CONFIG } from '../constants';
import { ErrorLogger } from '../utils/errorHandler';
import { authService } from './authService';

// Configura√ß√£o da inst√¢ncia do Axios
const apiClient: AxiosInstance = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// Interceptor para requisi√ß√µes
apiClient.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    // Log da requisi√ß√£o
    console.log(`üöÄ Fazendo requisi√ß√£o: ${config.method?.toUpperCase()} ${config.url}`);
    
    // Adicionar Bearer Token para endpoints que precisam de autentica√ß√£o
    if (config.url && authService.needsAuthentication(config.url)) {
      const bearerToken = authService.getBearerToken();
      
      if (bearerToken) {
        config.headers.Authorization = bearerToken;
        console.log(`üîê Token adicionado para: ${config.url}`);
      } else {
        console.warn(`‚ö†Ô∏è  Token n√£o encontrado para requisi√ß√£o autenticada: ${config.url}`);
      }
    } else {
      console.log(`üîì Requisi√ß√£o p√∫blica (sem token): ${config.url}`);
    }
    
    return config;
  },
  (error) => {
    ErrorLogger.log(error, 'Request Interceptor');
    return Promise.reject(error);
  }
);

// Interceptor para respostas
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    // Tratamento de resposta bem-sucedida
    console.log(`‚úÖ Resposta recebida: ${response.status} ${response.config.url}`);
    return response;
  },
  (error) => {
    // Tratamento de erros com logging detalhado
    ErrorLogger.log(error, 'API Response Error');
    
    // Tratamento espec√≠fico para diferentes tipos de erro
    if (error.response) {
      // O servidor respondeu com um status de erro
      const { status, data, config } = error.response;
      console.error(`‚ùå Erro ${status}:`, data);
      
      // Tratamentos espec√≠ficos por status
      switch (status) {
        case 401:
          // Token inv√°lido/expirado - fazer logout autom√°tico
          console.warn('üö´ Token inv√°lido ou expirado - realizando logout autom√°tico');
          authService.logout();
          
          // Redirecionar para p√°gina de autentica√ß√£o (somente se n√£o for a pr√≥pria p√°gina de login)
          if (!config.url?.includes('/v1/usuario/login')) {
            window.location.href = '/auth';
          }
          break;
        case 403:
          console.warn('üîí Acesso negado - permiss√µes insuficientes');
          break;
        case 404:
          console.warn('üîç Recurso n√£o encontrado');
          break;
        case 500:
          console.error('üî• Erro interno do servidor');
          break;
      }
    } else if (error.request) {
      // A requisi√ß√£o foi feita mas n√£o houve resposta
      console.error('üîå Erro de conex√£o - sem resposta do servidor');
    } else {
      // Algo aconteceu na configura√ß√£o da requisi√ß√£o
      console.error('‚öôÔ∏è Erro na configura√ß√£o da requisi√ß√£o:', error.message);
    }
    
    return Promise.reject(error);
  }
);

// Fun√ß√µes auxiliares para diferentes tipos de requisi√ß√£o
export const api = {
  get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> =>
    apiClient.get(url, config),
  
  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> =>
    apiClient.post(url, data, config),
  
  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> =>
    apiClient.put(url, data, config),
  
  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> =>
    apiClient.patch(url, data, config),
  
  delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> =>
    apiClient.delete(url, config),
};

export default apiClient;
